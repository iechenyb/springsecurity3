<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-3.1.xsd
	http://www.springframework.org/schema/security/oauth2
	http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">
  <!--登录页面不过滤 -->
  <http pattern="/login.jsp" security="none"/>
  <http pattern="/login.html" security="none"/>
  <http pattern="/exit.html" security="none"/>
  <http pattern="/denied.jsp" security="none"/>
  <!--  entry-point-ref="myAuthenticationEntryPoint" -->
  <http access-denied-page="/denied.jsp" auto-config="true"
       use-expressions="true">      
    <form-login login-page="/login.jsp" login-processing-url="/login.html" 
        always-use-default-target="true" default-target-url="/welcome" 
        authentication-failure-url="/fail.html?error=error"/>
	<!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 -->
	<intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
	<!-- <intercept-url pattern="/*" access="hasRole('ROLE_USER')" /> -->
	<!--访问/**资源的用户必须具有ROLE_USER的权限 -->
	<intercept-url pattern="/user/*" access="hasRole('ROLE_USER')"/>
	<intercept-url pattern="/index.jsp" access="hasRole('ROLE_USER')"/>
	<!-- <intercept-url pattern="/any/*" access="hasRole('IS_AUTHENTICATED_ANONYMOUSLY')"/> -->
	<!-- /j_spring_security_logout -->
	<logout logout-success-url="/exit.html" logout-url="/login.jsp" 
	    invalidate-session="true" delete-cookies="JSESSIONID"/>
	<session-management>
	<concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
	</session-management>
  </http>
  <!--  <http use-expressions="false">         
    <intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>      
    <intercept-url pattern="/**" access="ROLE_USER" />     
    <form-login login-page='/login.jsp' authentication-failure-url='/login.jsp?error' />  
    <logout />  
  </http>  -->
 <!--  <http use-expressions="false">  
        访问所有页面都需要有USER权限  
        <intercept-url pattern="/**" access="ROLE_USER" />  
        登录功能  
        <form-login />  
        登出功能  
        <logout />  
    </http>  --> 
   <!--  <authentication-manager>  
        <authentication-provider>  
            <user-service>  
                这里创建两个用户，可以通过用户名密码登录  
                <user name="admin" password="1" authorities="ROLE_USER,ROLE_ADMIN" />  
                <user name="user" password="1" authorities="ROLE_USER" />  
            </user-service>  
        </authentication-provider>  
    </authentication-manager>  -->
    <authentication-manager alias="myAuthenticationManager">
		<authentication-provider user-service-ref="myUserDetailServiceImpl" />
	</authentication-manager>
	<!-- auth2.0 -->
	<!--处理访问成功-->
    <!-- <beans:bean id="oauth2AuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
    处理访问拒绝
    <beans:bean id="oauth2AccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    处理认证点
    <beans:bean id="oauthUserApprovalHandler"
        class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />
    处理访问控制
    <beans:bean id="oauth2AccessDecisionManager"
        class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean
                    class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <beans:bean class="org.springframework.security.access.vote.RoleVoter" />
                <beans:bean
                    class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
   <oauth2:client-details-service id="clientDetailsService" >
        <oauth2:client client-id="mobile_1"
            authorized-grant-types="password,authorization_code,refresh_token,implicit"
            secret="secret_1" scope="read,write,trust"/>
    </oauth2:client-details-service>
    
    <beans:bean id="oauth2ClientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService" />
    </beans:bean>
     token在服务器存储的方式    InMemoryTokenStore ：保存在内存     ；JdbcTokenStore : 保存在数据库中
    <beans:bean id="tokenStore"
        class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
    <beans:bean id="tokenServices"
        class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">     令牌服务的实体
    <beans:bean id="tokenServices" class="org.zhangfc.demo4ssh.service.MyTokenService">      自己重写的类
    
     /oauth/token 是oauth2登陆验证请求的url     用于获取access_token  
    ,默认的生存时间是43200秒，即12小时 oauth2AuthenticationManager
    <http pattern="/oauth/token" create-session="stateless"
        authentication-manager-ref="myAuthenticationManager">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />    
         可以访问的角色名称，如果需要拦截，需要实现UserDetails接口，实现getAuthorities（）方法
        <anonymous enabled="false" />
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
            before="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauth2AccessDeniedHandler" />
    </http>
      oauth2 的server所能支持的请求类型
    <oauth2:authorization-server
        client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
        user-approval-handler-ref="oauthUserApprovalHandler">
        <oauth2:authorization-code />
        <oauth2:implicit />
        <oauth2:refresh-token />
        <oauth2:client-credentials />
        <oauth2:password />
    </oauth2:authorization-server>oauth2AuthenticationManager
      <beans:bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="myAuthenticationManager" />
    </beans:bean>
      指定spring要保护的资源，如果没有这个，访问控制的时候会说没有Authentication object：
    <oauth2:resource-server id="mobileResourceServer"
        resource-id="mobile-resource" token-services-ref="tokenServices" />
      <http pattern="/admin**" create-session="never"
        entry-point-ref="oauth2AuthenticationEntryPoint"
        access-decision-manager-ref="oauth2AccessDecisionManager">
        <anonymous enabled="false" />
        <intercept-url pattern="/admin**" access="SCOPE_READ,ROLE_ADMIN" />
        <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauth2AccessDeniedHandler" />
    </http> -->
</beans:beans>